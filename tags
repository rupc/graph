!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AdjGraph	inc/graph.h	/^        AdjGraph(bool dir, std::string s = "") $/;"	f	class:AdjGraph
AdjGraph	inc/graph.h	/^        AdjGraph(int V, int E, bool dir, bool allow_minus) {}$/;"	f	class:AdjGraph
AdjGraph	inc/graph.h	/^class AdjGraph {$/;"	c
AdjGraph	src/graph.cpp	/^AdjGraph::AdjGraph(Matrix mat) {$/;"	f	class:AdjGraph
AdjList	inc/graph.h	/^typedef std::map<int, std::set<int>> AdjList;$/;"	t
AdjMat	inc/graph.h	/^typedef std::vector<std::vector<int>> AdjMat;$/;"	t
Adjs	inc/graph.h	/^    AdjList &Adjs = id_adj_map;$/;"	m	class:AdjGraph
BIN_EXCUTE	Makefile	/^BIN_EXCUTE =bin\/graph$/;"	m
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS= -g -std=c++14 -O2$/;"	m
COLOR_BLACK	inc/graph.h	27;"	d
COLOR_GRAY	inc/graph.h	26;"	d
COLOR_WHITE	inc/graph.h	25;"	d
CXX	Makefile	/^CXX=g++$/;"	m
DIST_INF	inc/graph.h	28;"	d
EDGE_D	inc/graph.h	115;"	d
EDGE_DST	inc/graph.h	111;"	d
EDGE_S	inc/graph.h	114;"	d
EDGE_SRC	inc/graph.h	110;"	d
EDGE_WEIGHT	inc/graph.h	112;"	d
EDGE_WEIGHT_DEFAULT	inc/graph.h	30;"	d
EXCUTABLE	Makefile	/^EXCUTABLE=bin\/graph$/;"	m
EdgeKey	inc/graph.h	/^typedef std::pair<int, int> EdgeKey;$/;"	t
EdgeMap	inc/graph.h	/^typedef std::map<EdgeKey, EdgeType> EdgeMap;$/;"	t
EdgeType	inc/graph.h	/^typedef gEdge EdgeType;$/;"	t
Edges	inc/graph.h	/^    EdgeMap &Edges = edge_map;$/;"	m	class:AdjGraph
FakeHeap	inc/graph.h	/^typedef std::vector<NodeType *> FakeHeap;$/;"	t
GRAPH_H	inc/graph.h	2;"	d
Heap	inc/graph.h	/^typedef std::vector<std::pair<int*, int>> Heap;$/;"	t
INC	Makefile	/^INC = .\/inc$/;"	m
IdMap	inc/graph.h	/^typedef std::map<int, NodeType> IdMap;$/;"	t
MOVE_OBJ	Makefile	/^MOVE_OBJ=mv $@ obj\/$/;"	m
Matrix	inc/graph.h	/^typedef std::vector<std::vector<int>> Matrix;$/;"	t
Mats	inc/graph.h	/^    AdjMat &Mats = adj_mat;$/;"	m	class:AdjGraph
NodeSet	inc/graph.h	/^typedef std::set<int> NodeSet;$/;"	t
NodeType	inc/graph.h	/^typedef gNode NodeType;$/;"	t
Nodes	inc/graph.h	/^    IdMap &Nodes = id_node_map;$/;"	m	class:AdjGraph
OBJ	Makefile	/^OBJ = main.o graph.o$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = $(addprefix obj\/,$(OBJ))$/;"	m
SRC	Makefile	/^SRC = $(OBJ:.o=.cpp)$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = $(addprefix src\/,$(SRC))$/;"	m
TARGET	Makefile	/^TARGET=graph$/;"	m
adj_mat	inc/graph.h	/^        AdjMat adj_mat; \/\/ adjacent matrix$/;"	m	class:AdjGraph
bellman_ford	src/graph.cpp	/^bool AdjGraph::bellman_ford(int src) {$/;"	f	class:AdjGraph
bellmanford_test	src/main.cpp	/^void bellmanford_test(istream &pin) {$/;"	f
bfs	src/graph.cpp	/^nodePath AdjGraph::bfs(int sid, nVisitor visitor = nullptr) {$/;"	f	class:AdjGraph
check_all_path_to	src/graph.cpp	/^Matrix AdjGraph::check_all_path_to() {$/;"	f	class:AdjGraph
check_cycle	src/graph.cpp	/^inline bool AdjGraph::check_cycle(int src) {$/;"	f	class:AdjGraph
check_path_to	src/graph.cpp	/^inline bool AdjGraph::check_path_to(int src, int dst) {$/;"	f	class:AdjGraph
color	inc/graph.h	/^    int color;$/;"	m	struct:gNode
comp_pair	src/graph.cpp	/^bool comp_pair(std::pair<int*, int> &lhs, std::pair<int*, int> &rhs) {$/;"	f
compare_by_dist	src/graph.cpp	/^bool compare_by_dist(NodeType *lhs, NodeType *rhs) {$/;"	f
delete_edge	src/graph.cpp	/^void AdjGraph::delete_edge(EdgeKey &e) {$/;"	f	class:AdjGraph
delete_node	src/graph.cpp	/^void AdjGraph::delete_node(int id) {$/;"	f	class:AdjGraph
dfs_forest	src/graph.cpp	/^nForest AdjGraph::dfs_forest(int sid) {$/;"	f	class:AdjGraph
dfs_recur_test	src/main.cpp	/^void dfs_recur_test() {$/;"	f
dfs_recursive	src/graph.cpp	/^nodePath AdjGraph::dfs_recursive(int sid, nVisitor *visitor = nullptr) {$/;"	f	class:AdjGraph
dfs_stack	src/graph.cpp	/^nodePath AdjGraph::dfs_stack(int sid, nVisitor visitor = nullptr) {$/;"	f	class:AdjGraph
dfs_visit	src/graph.cpp	/^void AdjGraph::dfs_visit(NodeType *u, int &_time, nodePath &path) {$/;"	f	class:AdjGraph
dijkstra_clrs	src/graph.cpp	/^void AdjGraph::dijkstra_clrs(int src) {$/;"	f	class:AdjGraph
dijkstra_test	src/main.cpp	/^void dijkstra_test(istream &pin) {$/;"	f
directed	inc/graph.h	/^        bool directed;$/;"	m	class:AdjGraph
dist	inc/graph.h	/^    int dist;$/;"	m	struct:gNode
dst	inc/graph.h	/^    int dst;$/;"	m	struct:gEdge
edge_map	inc/graph.h	/^        EdgeMap edge_map;$/;"	m	class:AdjGraph
edge_set	inc/graph.h	/^        std::vector<EdgeType> edge_set;$/;"	m	class:AdjGraph
edge_size	inc/graph.h	/^        size_t edge_size() {return edge_map.size();}$/;"	f	class:AdjGraph
finish_time	inc/graph.h	/^    int finish_time = 0; $/;"	m	struct:gNode
floyd_warshall	src/graph.cpp	/^Matrix AdjGraph::floyd_warshall(int src) {$/;"	f	class:AdjGraph
gEdge	inc/graph.h	/^    gEdge(int s, int d)$/;"	f	struct:gEdge
gEdge	inc/graph.h	/^    gEdge(int s, int d, int w) $/;"	f	struct:gEdge
gEdge	inc/graph.h	/^struct gEdge {$/;"	s
gNode	inc/graph.h	/^    gNode(int i, std::string s)$/;"	f	struct:gNode
gNode	inc/graph.h	/^    gNode(int node_id)$/;"	f	struct:gNode
gNode	inc/graph.h	/^struct gNode {$/;"	s
get_node	src/graph.cpp	/^NodeType* AdjGraph::get_node(int id) {$/;"	f	class:AdjGraph
get_weight	src/graph.cpp	/^inline int AdjGraph::get_weight(int src, int dst) {$/;"	f	class:AdjGraph
iPath	inc/graph.h	/^typedef std::vector<int> iPath; $/;"	t
id	inc/graph.h	/^    int id; \/\/ Unique identifier by number or string name$/;"	m	struct:gNode
id_adj_map	inc/graph.h	/^        AdjList id_adj_map; \/\/ adjacent list table$/;"	m	class:AdjGraph
id_node_map	inc/graph.h	/^        IdMap id_node_map; \/\/ id-node mapping table$/;"	m	class:AdjGraph
in_deg	inc/graph.h	/^    int in_deg = 0;$/;"	m	struct:gNode
in_degree	inc/graph.h	/^        size_t in_degree(NodeType *v) {}$/;"	f	class:AdjGraph
in_degree	inc/graph.h	/^        size_t in_degree(int id) {}$/;"	f	class:AdjGraph
init_all_nodes_property	src/graph.cpp	/^inline void AdjGraph::init_all_nodes_property() {$/;"	f	class:AdjGraph
init_from_weighted_edge	src/graph.cpp	/^void AdjGraph::init_from_weighted_edge(istream &pin) {$/;"	f	class:AdjGraph
init_mat_to_lst	src/graph.cpp	/^void AdjGraph::init_mat_to_lst(Matrix &adj_mat) {$/;"	f	class:AdjGraph
init_matrix	src/graph.cpp	/^void AdjGraph::init_matrix() {$/;"	f	class:AdjGraph
init_romania	src/graph.cpp	/^void init_romania(std::istream &pin, AdjGraph &graph) {$/;"	f
init_single_node	inc/graph.h	/^    void init_single_node() {$/;"	f	struct:gNode
init_single_source	src/graph.cpp	/^inline void AdjGraph::init_single_source(int sid) {$/;"	f	class:AdjGraph
input_bellmanford	src/main.cpp	/^const char input_bellmanford[] = "data\/bellmanford2.in";$/;"	v
input_dfs1	src/main.cpp	/^const char input_dfs1[] = "data\/dfs1.in";$/;"	v
input_dijkstra	src/main.cpp	/^const char input_dijkstra[] = "data\/dijkstra1.in";$/;"	v
input_mat2	src/main.cpp	/^const char input_mat2[] = "data\/mat2.in";$/;"	v
input_romania	src/main.cpp	/^const char input_romania[] = "data\/romania.in";$/;"	v
input_topo1	src/main.cpp	/^const char input_topo1[] = "data\/topo1.in";$/;"	v
input_topo2	src/main.cpp	/^const char input_topo2[] = "data\/topo2.in";$/;"	v
insert_edge	src/graph.cpp	/^EdgeType& AdjGraph::insert_edge(int src, int dst) {$/;"	f	class:AdjGraph
insert_edge	src/graph.cpp	/^void AdjGraph::insert_edge(int src, int dst, int weight) {$/;"	f	class:AdjGraph
insert_node	src/graph.cpp	/^NodeType* AdjGraph::insert_node(int id) {$/;"	f	class:AdjGraph
insert_node	src/graph.cpp	/^NodeType* AdjGraph::insert_node(int id, std::string name) {$/;"	f	class:AdjGraph
is_already	src/graph.cpp	/^inline bool AdjGraph::is_already(int id) {$/;"	f	class:AdjGraph
main	src/main.cpp	/^int main(void) {$/;"	f
mprint	src/graph.cpp	/^void AdjGraph::mprint(std::ostream &pout) {$/;"	f	class:AdjGraph
nForest	inc/graph.h	/^typedef std::list<nodePath> nForest;$/;"	t
nVisitor	inc/graph.h	/^typedef std::function<bool(NodeType *)> nVisitor; $/;"	t
name	inc/graph.h	/^        std::string name;$/;"	m	class:AdjGraph
name	inc/graph.h	/^    std::string name;$/;"	m	struct:gNode
nodePath	inc/graph.h	/^typedef std::list<NodeType *> nodePath;    $/;"	t
node_size	inc/graph.h	/^        size_t node_size() {return id_adj_map.size();}$/;"	f	class:AdjGraph
operator <<	src/main.cpp	/^ostream& operator << (ostream &out, nodePath path) {$/;"	f
out_deg	inc/graph.h	/^    int out_deg = 0;$/;"	m	struct:gNode
out_degree	inc/graph.h	/^        size_t out_degree(NodeType *v) {return Adjs[v->id].size();}$/;"	f	class:AdjGraph
out_degree	inc/graph.h	/^        size_t out_degree(int id) {return Adjs[id].size();}$/;"	f	class:AdjGraph
phi	inc/graph.h	/^    gNode* phi;$/;"	m	struct:gNode
print	src/graph.cpp	/^void AdjGraph::print(std::ostream &pout) {$/;"	f	class:AdjGraph
print	src/graph.cpp	/^void gNode::print(std::ostream &pout) {$/;"	f	class:gNode
print_dfs	src/graph.cpp	/^void AdjGraph::print_dfs(std::ostream &out) {$/;"	f	class:AdjGraph
print_edges	src/graph.cpp	/^void AdjGraph::print_edges(std::ostream &out) {$/;"	f	class:AdjGraph
print_matrix	src/graph.cpp	/^void AdjGraph::print_matrix(std::ostream &out) {$/;"	f	class:AdjGraph
print_node_dist	src/graph.cpp	/^void AdjGraph::print_node_dist(std::ostream &out) {$/;"	f	class:AdjGraph
print_nodes	src/graph.cpp	/^void AdjGraph::print_nodes(std::ostream &pout) {$/;"	f	class:AdjGraph
relax_distance	src/graph.cpp	/^inline void AdjGraph::relax_distance(int uid, int vid, int weight) {$/;"	f	class:AdjGraph
relax_distance	src/graph.cpp	/^inline void AdjGraph::relax_distance(int uid, int vid, int weight, FakeHeap &heap) {$/;"	f	class:AdjGraph
reverse_edge	src/graph.cpp	/^void AdjGraph::reverse_edge(EdgeKey &e) {$/;"	f	class:AdjGraph
reverse_edge_all	src/graph.cpp	/^void AdjGraph::reverse_edge_all() {$/;"	f	class:AdjGraph
shortDists	inc/graph.h	/^typedef std::vector<int> shortDists; $/;"	t
src	inc/graph.h	/^    int src;$/;"	m	struct:gEdge
topo_test	src/main.cpp	/^void topo_test() {$/;"	f
topological_sort	src/graph.cpp	/^nodePath AdjGraph::topological_sort() {$/;"	f	class:AdjGraph
tsort_kahn	src/graph.cpp	/^nodePath AdjGraph::tsort_kahn() {$/;"	f	class:AdjGraph
weight	inc/graph.h	/^    int weight;$/;"	m	struct:gEdge
~AdjGraph	inc/graph.h	/^        ~AdjGraph() {}$/;"	f	class:AdjGraph
